# -*- coding: utf-8 -*-
"""
üìä Script para Cria√ß√£o de Dados de Exemplo
Sistema de Gest√£o Escolar v2.1

Este script cria dados de exemplo para testar o sistema:
- Turmas
- Alunos com respons√°veis
- Mensalidades autom√°ticas
"""

import sys
import os
from pathlib import Path

# Adicionar diret√≥rio atual ao path para importa√ß√µes
current_dir = Path(__file__).parent.absolute()
if str(current_dir) not in sys.path:
    sys.path.insert(0, str(current_dir))

try:
    from database.connection import db
    from services.aluno_service import AlunoService
    from services.mensalidade_service import MensalidadeService
    import sqlite3
    from datetime import datetime, date
    import random
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("Certifique-se de estar executando na pasta raiz do projeto")
    sys.exit(1)

def criar_turmas_exemplo():
    """Cria turmas de exemplo se n√£o existirem"""
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # Verificar se j√° existem turmas
        cursor.execute("SELECT COUNT(*) FROM turmas")
        total_turmas = cursor.fetchone()[0]
        
        if total_turmas > 0:
            print(f"‚ÑπÔ∏è J√° existem {total_turmas} turmas no sistema")
            conn.close()
            return
        
        print("üè´ Criando turmas de exemplo...")
        
        turmas_exemplo = [
            ("1¬∫ Ano A", "1¬∫ Ano", "2025"),
            ("1¬∫ Ano B", "1¬∫ Ano", "2025"),
            ("2¬∫ Ano A", "2¬∫ Ano", "2025"),
            ("2¬∫ Ano B", "2¬∫ Ano", "2025"),
            ("3¬∫ Ano A", "3¬∫ Ano", "2025"),
            ("3¬∫ Ano B", "3¬∫ Ano", "2025"),
            ("Pr√©-escola - Infantil", "Infantil", "2025"),
            ("Maternal I", "Infantil", "2025"),
            ("Maternal II", "Infantil", "2025"),
            ("Jardim I", "Infantil", "2025")
        ]
        
        cursor.executemany("""
            INSERT INTO turmas (nome, serie, ano_letivo) 
            VALUES (?, ?, ?)
        """, turmas_exemplo)
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ {len(turmas_exemplo)} turmas criadas com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar turmas: {e}")

def criar_alunos_exemplo():
    """Cria alunos de exemplo com respons√°veis"""
    try:
        print("üë• Criando alunos de exemplo...")
        
        aluno_service = AlunoService()
        
        # Buscar turmas dispon√≠veis
        turmas = aluno_service.listar_turmas()
        
        if not turmas:
            print("‚ùå Nenhuma turma encontrada. Execute criar_turmas_exemplo() primeiro")
            return
        
        # Verificar se j√° existem alunos
        alunos_existentes = aluno_service.listar_alunos()
        if len(alunos_existentes) >= 10:
            print(f"‚ÑπÔ∏è J√° existem {len(alunos_existentes)} alunos no sistema")
            return
        
        # Dados de alunos de exemplo
        alunos_exemplo = [
            {
                'nome': 'Ana Clara Silva Santos',
                'data_nascimento': '2015-03-15',
                'cpf': '123.456.789-01',
                'sexo': 'Feminino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0001',
                'endereco': 'Rua das Flores, 123 - Centro',
                'valor_mensalidade': 850.00,
                'responsaveis': [
                    {'nome': 'Maria Silva Santos', 'telefone': '(11) 98888-0001', 'parentesco': 'M√£e', 'principal': True},
                    {'nome': 'Jo√£o Silva Santos', 'telefone': '(11) 97777-0001', 'parentesco': 'Pai', 'principal': False}
                ]
            },
            {
                'nome': 'Pedro Henrique Costa',
                'data_nascimento': '2014-07-22',
                'cpf': '234.567.890-12',
                'sexo': 'Masculino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0002',
                'endereco': 'Avenida Principal, 456 - Jardins',
                'valor_mensalidade': 920.00,
                'responsaveis': [
                    {'nome': 'Laura Costa', 'telefone': '(11) 98888-0002', 'parentesco': 'M√£e', 'principal': True}
                ]
            },
            {
                'nome': 'Sofia Rodrigues Lima',
                'data_nascimento': '2013-11-08',
                'cpf': '345.678.901-23',
                'sexo': 'Feminino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0003',
                'endereco': 'Pra√ßa da Liberdade, 789 - Vila Nova',
                'valor_mensalidade': 780.50,
                'responsaveis': [
                    {'nome': 'Roberto Oliveira Lima', 'telefone': '(11) 98888-0003', 'parentesco': 'Pai', 'principal': True},
                    {'nome': 'Fernanda Rodrigues', 'telefone': '(11) 97777-0003', 'parentesco': 'M√£e', 'principal': False}
                ]
            },
            {
                'nome': 'Lucas Gabriel Ferreira',
                'data_nascimento': '2014-05-30',
                'cpf': '456.789.012-34',
                'sexo': 'Masculino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0004',
                'endereco': 'Rua do Com√©rcio, 321 - S√£o Jo√£o',
                'valor_mensalidade': 990.00,
                'responsaveis': [
                    {'nome': 'Carlos Ferreira', 'telefone': '(11) 98888-0004', 'parentesco': 'Pai', 'principal': True}
                ]
            },
            {
                'nome': 'Valentina Santos Pereira',
                'data_nascimento': '2015-09-12',
                'cpf': '567.890.123-45',
                'sexo': 'Feminino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0005',
                'endereco': 'Alameda dos Anjos, 654 - Alto da Serra',
                'valor_mensalidade': 825.75,
                'responsaveis': [
                    {'nome': 'Patr√≠cia Santos', 'telefone': '(11) 98888-0005', 'parentesco': 'M√£e', 'principal': True},
                    {'nome': 'Anderson Pereira', 'telefone': '(11) 97777-0005', 'parentesco': 'Pai', 'principal': False}
                ]
            },
            {
                'nome': 'Arthur Souza Almeida',
                'data_nascimento': '2013-12-25',
                'cpf': '678.901.234-56',
                'sexo': 'Masculino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0006',
                'endereco': 'Travessa da Paz, 987 - Bela Vista',
                'valor_mensalidade': 750.00,
                'responsaveis': [
                    {'nome': 'Cristina Almeida', 'telefone': '(11) 98888-0006', 'parentesco': 'M√£e', 'principal': True}
                ]
            },
            {
                'nome': 'Isabella Ferreira Costa',
                'data_nascimento': '2014-02-14',
                'cpf': '789.012.345-67',
                'sexo': 'Feminino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0007',
                'endereco': 'Rua das Palmeiras, 147 - Parque das √Årvores',
                'valor_mensalidade': 880.25,
                'responsaveis': [
                    {'nome': 'Ricardo Costa', 'telefone': '(11) 98888-0007', 'parentesco': 'Pai', 'principal': True},
                    {'nome': 'Juliana Ferreira', 'telefone': '(11) 97777-0007', 'parentesco': 'M√£e', 'principal': False}
                ]
            },
            {
                'nome': 'Miguel Santos Oliveira',
                'data_nascimento': '2015-06-18',
                'cpf': '890.123.456-78',
                'sexo': 'Masculino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0008',
                'endereco': 'Estrada do Sol, 258 - Campo Verde',
                'valor_mensalidade': 795.50,
                'responsaveis': [
                    {'nome': 'Beatriz Oliveira', 'telefone': '(11) 98888-0008', 'parentesco': 'M√£e', 'principal': True}
                ]
            },
            {
                'nome': 'Alice Pereira Rocha',
                'data_nascimento': '2013-10-03',
                'cpf': '901.234.567-89',
                'sexo': 'Feminino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0009',
                'endereco': 'Avenida das Am√©ricas, 369 - Novo Mundo',
                'valor_mensalidade': 865.00,
                'responsaveis': [
                    {'nome': 'Marcelo Rocha', 'telefone': '(11) 98888-0009', 'parentesco': 'Pai', 'principal': True},
                    {'nome': 'Carla Pereira', 'telefone': '(11) 97777-0009', 'parentesco': 'M√£e', 'principal': False}
                ]
            },
            {
                'nome': 'Benjam√≠n Silva Martins',
                'data_nascimento': '2014-04-27',
                'cpf': '012.345.678-90',
                'sexo': 'Masculino',
                'nacionalidade': 'Brasileira',
                'telefone': '(11) 99999-0010',
                'endereco': 'Vila Esperan√ßa, 741 - Distrito Industrial',
                'valor_mensalidade': 720.00,
                'responsaveis': [
                    {'nome': 'Sandra Martins', 'telefone': '(11) 98888-0010', 'parentesco': 'M√£e', 'principal': True}
                ]
            }
        ]
        
        alunos_criados = 0
        
        for i, aluno_data in enumerate(alunos_exemplo):
            try:
                # Selecionar turma aleat√≥ria
                turma_escolhida = random.choice(turmas)
                
                # Preparar dados do aluno
                aluno_dados = {
                    'nome': aluno_data['nome'],
                    'data_nascimento': aluno_data['data_nascimento'],
                    'cpf': aluno_data['cpf'],
                    'sexo': aluno_data['sexo'],
                    'nacionalidade': aluno_data['nacionalidade'],
                    'telefone': aluno_data['telefone'],
                    'endereco': aluno_data['endereco'],
                    'turma_id': turma_escolhida['id'],
                    'status': 'Ativo',
                    'valor_mensalidade': aluno_data['valor_mensalidade']
                }
                
                # Salvar aluno (isso vai gerar mensalidades automaticamente)
                resultado = aluno_service.salvar_aluno(aluno_dados, aluno_data['responsaveis'])
                
                if resultado['success']:
                    alunos_criados += 1
                    print(f"‚úÖ Aluno {i+1}/10 criado: {aluno_data['nome']}")
                else:
                    print(f"‚ùå Erro ao criar aluno {aluno_data['nome']}: {resultado['error']}")
                
            except Exception as e:
                print(f"‚ùå Erro ao processar aluno {aluno_data['nome']}: {e}")
        
        print(f"üéâ {alunos_criados} alunos criados com sucesso!")
        print("üí∞ Mensalidades foram geradas automaticamente para cada aluno!")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar alunos de exemplo: {e}")

def gerar_mensalidades_para_todos_alunos():
    """Gera mensalidades para todos os alunos ativos que n√£o t√™m mensalidades"""
    try:
        from services.mensalidade_service import MensalidadeService
        
        print("üí∞ Verificando e gerando mensalidades para todos os alunos...")
        
        aluno_service = AlunoService()
        mensalidade_service = MensalidadeService()
        
        # Listar todos os alunos ativos
        alunos = aluno_service.listar_alunos()
        alunos_ativos = [a for a in alunos if a['status'] == 'Ativo']
        
        if not alunos_ativos:
            print("‚ÑπÔ∏è Nenhum aluno ativo encontrado")
            return
        
        total_geradas = 0
        alunos_processados = 0
        
        for aluno in alunos_ativos:
            try:
                # Verificar se j√° tem mensalidades
                stats = mensalidade_service.verificar_mensalidades_aluno(aluno['id'])
                
                if stats['total'] == 0:
                    print(f"üìã Gerando mensalidades para {aluno['nome']}...")
                    
                    resultado = mensalidade_service.gerar_mensalidades_aluno(aluno['id'])
                    
                    if resultado['success']:
                        mensalidades_criadas = resultado.get('mensalidades_criadas', 0)
                        total_geradas += mensalidades_criadas
                        print(f"‚úÖ {mensalidades_criadas} mensalidades criadas")
                    else:
                        print(f"‚ùå Erro: {resultado.get('error', 'Desconhecido')}")
                else:
                    print(f"‚ÑπÔ∏è {aluno['nome']} j√° possui {stats['total']} mensalidades")
                
                alunos_processados += 1
                
            except Exception as e:
                print(f"‚ùå Erro ao processar {aluno['nome']}: {e}")
        
        print(f"üéâ Processamento conclu√≠do:")
        print(f"   üìä {alunos_processados} alunos processados")
        print(f"   üí∞ {total_geradas} mensalidades geradas no total")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar mensalidades em lote: {e}")
        return False

def criar_dados_exemplo():
    """Fun√ß√£o principal para criar todos os dados de exemplo"""
    try:
        print("üöÄ CRIANDO DADOS DE EXEMPLO PARA O SISTEMA")
        print("=" * 60)
        
        # 1. Verificar se o banco est√° funcionando
        try:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
            total_tabelas = cursor.fetchone()[0]
            conn.close()
            
            if total_tabelas < 5:
                print("‚ö†Ô∏è Banco parece n√£o estar inicializado. Execute o main.py primeiro.")
                return False
            
        except Exception as e:
            print(f"‚ùå Erro ao verificar banco: {e}")
            return False
        
        # 2. Criar turmas
        criar_turmas_exemplo()
        
        # 3. Criar alunos (mensalidades s√£o geradas automaticamente)
        criar_alunos_exemplo()
        
        # 4. Verificar se h√° alunos sem mensalidades e gerar
        gerar_mensalidades_para_todos_alunos()
        
        print("=" * 60)
        print("üéâ DADOS DE EXEMPLO CRIADOS COM SUCESSO!")
        print("")
        print("üìã O que foi criado:")
        print("   üè´ 10 turmas de diferentes s√©ries")
        print("   üë• 10 alunos com respons√°veis")
        print("   üí∞ Mensalidades autom√°ticas (mar√ßo-dezembro)")
        print("")
        print("üöÄ Agora voc√™ pode executar o sistema e testar todas as funcionalidades!")
        print("   Execute: python main.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral na cria√ß√£o de dados: {e}")
        return False

def obter_estatisticas_sistema():
    """Mostra estat√≠sticas do sistema"""
    try:
        print("üìä ESTAT√çSTICAS DO SISTEMA")
        print("=" * 40)
        
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # Total de turmas
        cursor.execute("SELECT COUNT(*) FROM turmas")
        total_turmas = cursor.fetchone()[0]
        print(f"üè´ Turmas: {total_turmas}")
        
        # Total de alunos por status
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM alunos 
            GROUP BY status
        """)
        alunos_por_status = cursor.fetchall()
        
        total_alunos = 0
        for status, count in alunos_por_status:
            print(f"üë• Alunos {status}: {count}")
            total_alunos += count
        
        print(f"üë• Total de Alunos: {total_alunos}")
        
        # Total de respons√°veis
        cursor.execute("SELECT COUNT(*) FROM responsaveis")
        total_responsaveis = cursor.fetchone()[0]
        print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Respons√°veis: {total_responsaveis}")
        
        # Total de mensalidades
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM pagamentos 
            GROUP BY status
        """)
        mensalidades_por_status = cursor.fetchall()
        
        total_mensalidades = 0
        for status, count in mensalidades_por_status:
            print(f"üí∞ Mensalidades {status}: {count}")
            total_mensalidades += count
        
        print(f"üí∞ Total de Mensalidades: {total_mensalidades}")
        
        # Total de transfer√™ncias
        cursor.execute("SELECT COUNT(*) FROM historico_transferencias")
        total_transferencias = cursor.fetchone()[0]
        print(f"üîÑ Transfer√™ncias: {total_transferencias}")
        
        conn.close()
        print("=" * 40)
        
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")

def limpar_dados():
    """Limpa todos os dados do sistema (USE COM CUIDADO!)"""
    try:
        resposta = input("‚ö†Ô∏è ATEN√á√ÉO: Isso vai APAGAR TODOS OS DADOS! Digite 'CONFIRMAR' para continuar: ")
        
        if resposta != "CONFIRMAR":
            print("‚ùå Opera√ß√£o cancelada")
            return False
        
        print("üóëÔ∏è Limpando todos os dados...")
        
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # Ordem importante devido √†s chaves estrangeiras
        tabelas = [
            'historico_transferencias',
            'pagamentos', 
            'responsaveis',
            'alunos',
            'turmas',
            'configuracoes'
        ]
        
        for tabela in tabelas:
            cursor.execute(f"DELETE FROM {tabela}")
            print(f"‚úÖ Tabela {tabela} limpa")
        
        # Reset dos auto-increment
        cursor.execute("DELETE FROM sqlite_sequence")
        
        conn.commit()
        conn.close()
        
        print("üßπ Todos os dados foram removidos!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao limpar dados: {e}")
        return False

# === EXECU√á√ÉO PRINCIPAL ===
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Gerenciar dados de exemplo do Sistema de Gest√£o Escolar')
    parser.add_argument('--stats', action='store_true', help='Mostrar estat√≠sticas do sistema')
    parser.add_argument('--clean', action='store_true', help='Limpar todos os dados (CUIDADO!)')
    parser.add_argument('--mensalidades', action='store_true', help='Gerar mensalidades para alunos existentes')
    
    args = parser.parse_args()
    
    if args.stats:
        obter_estatisticas_sistema()
    elif args.clean:
        limpar_dados()
    elif args.mensalidades:
        gerar_mensalidades_para_todos_alunos()
    else:
        # Execu√ß√£o padr√£o - criar dados de exemplo
        criar_dados_exemplo()
